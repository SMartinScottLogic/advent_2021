use anyhow::{Context, Result};
use itertools::Itertools;
use log::{debug, info, trace};
use regex::Regex;
use std::cmp::{max, min};
use std::collections::{HashMap, HashSet};
use std::fs::File;
use std::io::{self, Error};
use std::io::{BufRead, BufReader};
use std::str::FromStr;

type Cost = u32;

pub fn load(filename: &str) -> anyhow::Result<Solution> {
    let file = File::open(filename).with_context(|| format!("Failed to read from {}", filename))?;

    let reader = BufReader::new(file);

    let mut solution = Solution::new();
    for (y, line) in reader.lines().enumerate() {
        for (x, c) in line?.trim_end().chars().enumerate() {
            match c {
                'A' | 'B' | 'C' | 'D' => solution.add_amphipod(c, x, y),
                '#' => solution.add_wall(x, y),
                ' ' => {}
                '.' => solution.add_space(x, y),
                _ => unreachable!(),
            }
        }
    }
    Ok(solution)
}

#[derive(Debug, Default)]
pub struct Solution {
    walls: Vec<Point>,
    amphipods: Vec<(Amphipod, Point)>,

    world: HashMap<Point, char>,
}

#[derive(Debug, Clone, Copy)]
enum Amphipod {
    Amber,
    Bronze,
    Copper,
    Desert,
}

impl Amphipod {
    fn as_char(&self) -> char {
        match self {
            Self::Amber => 'A',
            Self::Bronze => 'B',
            Self::Copper => 'C',
            Self::Desert => 'D',
        }
    }

    fn from_char(c: &char) -> Amphipod {
        match c {
            'A' => Self::Amber,
            'B' => Self::Bronze,
            'C' => Self::Copper,
            'D' => Self::Desert,
            _ => unreachable!(),
        }
    }

    fn step_cost(&self) -> Cost {
        match self {
            Self::Amber => 1,
            Self::Bronze => 10,
            Self::Copper => 100,
            Self::Desert => 1000,
        }
    }

    fn get_room_col(&self) -> usize {
        match self {
            Self::Amber => 3,
            Self::Bronze => 5,
            Self::Copper => 7,
            Self::Desert => 9,
        }
    }
}

#[derive(Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]
struct Point {
    x: usize,
    y: usize,
}

impl Solution {
    pub fn analyse(&mut self) {
        let m = self.next_move();
        debug!("move: {:?}", m);
    }

    fn next_move(&mut self) {
        self.rebuild_world();
        self.dump_world();
        for amphipod in &self.amphipods {
            if self.in_good_room(amphipod) {
                debug!("good room: {:?}", amphipod);
                continue;
            }
            if self.is_room_open(amphipod) {
                if let Some((target, cost)) = self.is_room_reachable(amphipod) {
                    debug!("room open {:?} -> {:?} {}", amphipod, target, cost);
                }
            }
        }
    }

    pub fn answer(&self) -> Option<i64> {
        None
    }
}

impl Solution {
    fn new() -> Self {
        Self::default()
    }

    fn dump_world(&self) {
        for y in 0..=4 {
            let mut s = String::new();
            for x in 0..=13 {
                s.push(*self.world.get(&Point::new(x, y)).unwrap_or(&'.'));
            }
            debug!("w{} {}", y, s);
        }
    }

    fn rebuild_world(&mut self) {
        let mut new_world = HashMap::new();
        for wall in &self.walls {
            new_world
                .entry(wall.to_owned())
                .and_modify(|v| *v = '#')
                .or_insert('#');
        }
        for amphipod in &self.amphipods {
            new_world
                .entry(amphipod.1)
                .and_modify(|v| *v = amphipod.0.as_char())
                .or_insert(amphipod.0.as_char());
        }
        self.world = new_world;
    }

    fn in_good_room(&self, amphipod: &(Amphipod, Point)) -> bool {
        if amphipod.1.y != 2 && amphipod.1.y != 3 {
            debug!("not good (Y) {:?}", amphipod);
            false
        } else if amphipod.1.x != amphipod.0.get_room_col() {
            debug!("not good (X) {:?}", amphipod);
            false
        } else {
            let x = amphipod.1.x;
            let y = amphipod.1.y;
            for oy in y + 1..=3 {
                let point = Point::new(x, oy);
                if &amphipod.0.as_char() != self.world.get(&point).unwrap_or(&'.') {
                    debug!("not good (room) {:?} for {:?}", point, amphipod);
                    return false;
                }
            }
            true
        }
    }

    fn is_room_open(&self, amphipod: &(Amphipod, Point)) -> bool {
        let x = amphipod.0.get_room_col();
        let a_char = amphipod.0.as_char();
        let (a, b) = (
            self.world.get(&Point::new(x, 2)).unwrap_or(&'.'),
            self.world.get(&Point::new(x, 3)).unwrap_or(&'.'),
        );
        (*a == '.' && *b == '.') || (*a == '.' && *b == a_char)
    }

    fn calculate_room_destination(&self, amphipod: &(Amphipod, Point)) -> Option<Point> {
        let x = amphipod.0.get_room_col();
        let a_char = amphipod.0.as_char();
        let p_top = Point::new(x, 2);
        let p_bottom = Point::new(x, 3);
        let (a, b) = (
            self.world.get(&p_top).unwrap_or(&'.'),
            self.world.get(&p_bottom).unwrap_or(&'.'),
        );
        if *a == '.' && *b == '.' {
            Some(p_bottom)
        } else if *a == '.' && *b == a_char {
            Some(p_top)
        } else {
            None
        }
    }

    fn is_room_reachable(&self, amphipod: &(Amphipod, Point)) -> Option<(Point, Cost)> {
        let mut have_seen = HashSet::new();
        let mut next = Vec::new();
        next.push((amphipod.1.clone(), 0));
        while let Some((p, steps)) = next.pop() {
            if self.in_good_room(&(amphipod.0.clone(), p)) {
                return Some((p, steps * amphipod.0.step_cost()));
            }
            for oy in -1..=1_i32 {
                for ox in -1..=1_i32 {
                    if ox.abs() + oy.abs() != 1 {
                        continue;
                    }
                    let nx = p.x as i32 + ox;
                    let ny = p.y as i32 + oy;

                    if nx < 0 || ny < 0 {
                        continue;
                    }
                    let np = Point::new(nx as usize, ny as usize);
                    let wc = self.world.get(&np).unwrap_or(&'.');
                    if *wc != '.' {
                        continue;
                    }
                    if have_seen.contains(&np) {
                        continue;
                    }
                    next.push((np, steps + 1));
                    have_seen.insert(np);
                }
            }
        }
        None
    }

    fn add_amphipod(&mut self, c: char, x: usize, y: usize) {
        self.amphipods
            .push((Amphipod::from_char(&c), Point::new(x, y)));
    }
    fn add_wall(&mut self, x: usize, y: usize) {
        self.walls.push(Point::new(x, y));
    }

    fn add_space(&mut self, x: usize, y: usize) {}
}

impl Point {
    fn new(x: usize, y: usize) -> Point {
        Point { x, y }
    }
}

#[derive(Debug, Default)]
pub struct Solution2 {
    answer: Option<i64>,
    amphipods: String,

    tentative_costs: HashMap<String, i64>,
    has_visited: HashSet<String>,
}

impl Solution2 {
    fn new() -> Self {
        Self {
            amphipods: r".".repeat(19),
            ..Default::default()
        }
    }

    pub fn analyse(&mut self) {
        Self::possible_moves(&self.amphipods);

        self.tentative_costs = HashMap::new();
        let mut node = self.amphipods.clone();
        let mut cost = 0;
        loop {
            self.update_costs(&node, cost);
            for (amphipods, tentative_cost) in &self.tentative_costs {
                trace!(
                    "{} {} {:?}",
                    tentative_cost,
                    Self::is_complete(&amphipods),
                    amphipods
                );
            }
            let next = self.next();
            match next {
                Some((n, c)) if !Self::is_complete(&n) => {
                    info!("next: {:?} {} {}", n, c, Self::is_complete(&n));
                    node = n.to_owned();
                    cost = c.to_owned();
                }
                _ => break,
            }
            self.has_visited.insert(node.clone());
            debug!("visited: {}", self.has_visited.len());
        }
        self.answer = None;
        for (node, cost) in self
            .tentative_costs
            .iter()
            .filter(|(nodes, cost)| Self::is_complete(*nodes))
        {
            info!("complete: {} {:?}", cost, node);
            self.answer = Some(*cost);
        }
    }

    pub fn answer(&self) -> Option<i64> {
        self.answer
    }
}

impl Solution2 {
    fn is_complete(nodes: &str) -> bool {
        nodes == r"...........ABCDABCD"
    }

    fn to_world(idx: usize) -> (i64, i64) {
        let idx = idx as i64;
        if idx <= 10 {
            (idx + 1, 1)
        } else if idx <= 14 {
            (2 * (idx - 11) + 3, 2)
        } else if idx <= 18 {
            (2 * (idx - 15) + 3, 3)
        } else {
            panic!("Illegal index: {}", idx);
        }
    }

    fn from_world(x: i64, y: i64) -> usize {
        if y == 1 && x >= 1 && x <= 11 {
            (x - 1) as usize
        } else if y == 2 && (x == 3 || x == 5 || x == 7 || x == 9) {
            (11 + (x - 3) / 2) as usize
        } else if y == 3 && (x == 3 || x == 5 || x == 7 || x == 9) {
            (15 + (x - 3) / 2) as usize
        } else {
            panic!("Illegal coords: ({},{})", x, y);
        }
    }

    fn is_path(x: i64, y: i64) -> bool {
        (y == 1 && (x >= 1 && x <= 11))
            || ((y == 2 || y == 3) && (x == 3 || x == 5 || x == 7 || x == 9))
    }

    fn dump(map: &str, cost: &i64) {
        let m = map
            .chars()
            .enumerate()
            .fold(HashMap::new(), |mut acc, (idx, c)| {
                let (x, y) = Self::to_world(idx);
                *acc.entry((x, y)).or_insert(' ') = c;
                acc
            });
        trace!("=================== {}", cost);
        for y in 1..=3 {
            let mut s = String::new();
            for x in 0..=12 {
                s.push(*m.get(&(x, y)).unwrap_or(&' '));
            }
            trace!("{}", s);
        }
        trace!("===================");
    }

    fn possible_moves(origin: &str) -> HashMap<String, i64> {
        debug!("origin: {:?}", origin);
        let mut possible_moves = HashMap::new();
        let mut considered = HashSet::new();

        let mut root = Vec::new();

        for (idx, c) in origin.chars().enumerate().filter(|(_, c)| *c != '.') {
            root.push((origin.to_owned(), idx, idx, 0_i64));
            considered.insert(origin.to_owned());
        }

        while let Some((current, start_idx, idx, cost)) = root.pop() {
            // Convert idx -> world coords
            let a_type = current.chars().nth(idx).unwrap();
            let (x, y) = Self::to_world(idx);
            let (sx, sy) = Self::to_world(start_idx);
            // Do not move if at bottom of correct room
            if y == 3
                && match a_type {
                    'A' if x == 3 => true,
                    'B' if x == 5 => true,
                    'C' if x == 7 => true,
                    'D' if x == 9 => true,
                    _ => false,
                }
            {
                trace!("Do not move {} at {},{}", a_type, x, y);
                continue;
            }
            // Do not move if at top of correct room, and same type at bottom
            if y == 2
                && match a_type {
                    'A' if x == 3 => true,
                    'B' if x == 5 => true,
                    'C' if x == 7 => true,
                    'D' if x == 9 => true,
                    _ => false,
                }
                && current
                    .chars()
                    .nth(Self::from_world(x, y + 1))
                    .unwrap()
                    .eq(&a_type)
            {
                trace!("Do not move {} at {},{}", a_type, x, y);
                continue;
            }
            for dy in -1..=1_i64 {
                for dx in -1..=1_i64 {
                    if dx.abs() + dy.abs() != 1 {
                        continue;
                    }
                    if !Self::is_path(x + dx, y + dy) {
                        continue;
                    }
                    // Cannot move into non-space
                    let next_idx = Self::from_world(x + dx, y + dy);
                    if current.chars().nth(next_idx).unwrap().ne(&'.') {
                        continue;
                    }

                    let next: String = current
                        .chars()
                        .enumerate()
                        .map(|(i, c)| {
                            if i == idx {
                                '.'
                            } else if i == next_idx {
                                a_type
                            } else {
                                c
                            }
                        })
                        .collect();
                    if considered.contains(&next) {
                        continue;
                    }
                    let cost = cost
                        + match a_type {
                            'A' => 1,
                            'B' => 10,
                            'C' => 100,
                            'D' => 1000,
                            _ => unreachable!(),
                        };
                    trace!("{} -> {}, {} -> {}", idx, next_idx, current, next);
                    root.push((next.clone(), start_idx, next_idx, cost));
                    considered.insert(next.clone());

                    // Legal full moves
                    // Can only move into correct room
                    if ((y + dy) == 2 || (y + dy) == 3)
                        && match a_type {
                            'A' if (x + dx) != 3 => true,
                            'B' if (x + dx) != 5 => true,
                            'C' if (x + dx) != 7 => true,
                            'D' if (x + dx) != 9 => true,
                            _ => false,
                        }
                    {
                        continue;
                    }
                    // Cannot move within hallway
                    if (y + dy) == 1 && sy == 1 {
                        continue;
                    }
                    // Cannot stop in doorway
                    if (y + dy) == 1
                        && ((x + dx) == 3 || (x + dx) == 5 || (x + dx) == 7 || (x + dx) == 9)
                    {
                        continue;
                    }
                    possible_moves
                        .entry(next.clone())
                        .and_modify(|v| *v = min(*v, cost))
                        .or_insert(cost);
                }
            }
        }

        debug!(
            "{} possible moves: {:?}",
            possible_moves.len(),
            possible_moves
        );
        for (m, cost) in &possible_moves {
            Self::dump(m, cost);
        }

        possible_moves
    }

    fn next(&self) -> Option<(String, i64)> {
        let mut best = None;
        for (node, tentative_cost) in &self.tentative_costs {
            if !self.has_visited.contains(node) {
                match best {
                    Some((_, c)) if c <= *tentative_cost => {}
                    _ => {
                        best = Some((node.to_owned(), tentative_cost.to_owned()));
                    }
                };
            }
        }
        best
    }

    fn update_costs(&mut self, amphipods: &str, cost: i64) {
        for (target, c) in Self::possible_moves(amphipods) {
            let tentative_cost = c + cost;
            trace!(
                "Can move from {:?}) to {:?} for {}",
                amphipods,
                target,
                tentative_cost
            );
            if self.has_visited.contains(&target) {
                continue;
            }
            self.tentative_costs
                .entry(target)
                .and_modify(|v| *v = min(*v, tentative_cost))
                .or_insert(tentative_cost);
        }
    }
    /*
    fn update_costs(
        &mut self,
        amphipods: &Vec<(Point, char)>,
        cost: i64,
    ) {
        let world = Self::build_world(&amphipods, &self.walls);
        for (position, nom) in amphipods {
            debug!("{} @ ({:?})", nom, position);
            // bottom of correct column
            if position.y == 3 && match (nom, position.x) {
                ('A', 3) => true,
                ('B', 5) => true,
                ('C', 7) => true,
                ('D', 9) => true,
                _ => false
            } {
                continue;
            }
            // top of correct, complete column
            if position.y == 2 && world.get(&Point{x: position.x, y: 3}).map_or(false, |v| nom==v) && match (nom, position.x) {
                ('A', 3) => true,
                ('B', 5) => true,
                ('C', 7) => true,
                ('D', 9) => true,
                _ => false
            } {
                continue;
            }
            let moves = Self::possible_moves(position.to_owned(), &world);
            debug!("Can move {} from ({:?}) to {:?}", nom, position, moves);
            for (target, distance) in moves {
                // Cannot stop at end of column
                if target.y == 1
                    && (target.x == 3 || target.x == 5 || target.x == 7 || target.x == 9)
                {
                    continue;
                }
                // Cannot move into non-final room
                if target.y > 1
                    && target.x
                        != match nom {
                            'A' => 3,
                            'B' => 5,
                            'C' => 7,
                            'D' => 9,
                            _ => unreachable!(),
                        }
                {
                    continue;
                }
                // Cannot move from hallway -> hallway
                if position.y == 1 && target.y == 1 {
                    continue;
                }
                // Calculate update cost
                let tentative_cost = cost
                    + distance
                        * match nom {
                            'A' => 1,
                            'B' => 10,
                            'C' => 100,
                            'D' => 1000,
                            _ => unreachable!(),
                        };
                debug!(
                    "Try move {} from ({:?}) to ({:?}), cost {}",
                    nom, position, target, tentative_cost
                );
                let mut next_amphipods = amphipods
                    .iter()
                    .filter(|(p, _)| p != position)
                    .map(|(p, a)| (p.to_owned(), a.to_owned()))
                    .collect::<Vec<_>>();
                next_amphipods.push((target, nom.to_owned()));
                next_amphipods.sort();
                self.tentative_costs.entry(next_amphipods).and_modify(|v| *v = min(*v, tentative_cost)).or_insert(tentative_cost);
            }
        }
    }
    */

    /*    fn brute_solution(amphipods: HashMap<char, HashSet<Point>>, walls: &HashSet<Point>, previous_worlds: HashSet<Vec<(Point, char)>>, partial_cost: i64, last_move: Option<Point>) -> Option<i64> {
            if Self::complete(&amphipods) {
                info!("best_cost: {:?}", partial_cost);
                return Some(partial_cost);
            }
            let world = Self::build_world(&amphipods, walls);
            let mut best_cost = None;
            for (nom, positions) in &amphipods {
                for position in positions {
                    // Don't re-move
                    if let Some(p) = last_move {
                        if p == *position {
                            continue;
                        }
                    }
                    debug!("{} @ ({:?})", nom, position);
                    // bottom of correct column
                    if position.y == 3 && match (nom, position.x) {
                        ('A', 3) => true,
                        ('B', 5) => true,
                        ('C', 7) => true,
                        ('D', 9) => true,
                        _ => false
                    } {
                        continue;
                    }
                    // top of correct, complete column
                    if position.y == 2 && world.get(&Point{x: position.x, y: 3}).map_or(false, |v| nom==v) && match (nom, position.x) {
                        ('A', 3) => true,
                        ('B', 5) => true,
                        ('C', 7) => true,
                        ('D', 9) => true,
                        _ => false
                    } {
                        continue;
                    }
                    let moves = Self::possible_moves(position.to_owned(), &world);
                    debug!("Can move {} from ({:?}) to {:?}", nom, position, moves);
                    for (target, distance) in moves {
                        // Cannot stop at end of column
                        if target.y==1 && (target.x == 3 || target.x==5 || target.x==7 || target.x==9) {
                            continue;
                        }
                        // Cannot move into non-final room
                        if target.y>1 && target.x!=match nom {
                            'A' => 3,
                            'B' => 5,
                            'C' => 7,
                            'D' => 9,
                            _ => unreachable!()
                        } {
                            continue;
                        }
                        // Do not revisit already seen alignment
                        let mut trial_amphipods = amphipods.clone();
                        trial_amphipods.entry(*nom).and_modify(|e| {
                            e.remove(position);
                            e.insert(target);
                        });
                        let trial_world = trial_amphipods.iter().flat_map(|(n, p)| p.iter().map(|v| (v.to_owned(), n.to_owned()))).sorted().collect::<Vec<_>>();
                        if previous_worlds.contains(&trial_world) {
                            continue;
                        }
                        let mut trial_previous_worlds = previous_worlds.clone();
                        trial_previous_worlds.insert(trial_world);
                        let cost = distance * match nom {
                            'A' => 1,
                            'B' => 10,
                            'C' => 100,
                            'D' => 1000,
                            _ => unreachable!()
                        };
                        debug!("Try move {} from ({:?}) to ({:?}), cost {}", nom, position, target, cost);
                        best_cost = match (best_cost, Self::brute_solution(trial_amphipods, walls, trial_previous_worlds, partial_cost + cost, Some(target))) {
                            (None, Some(v)) => Some(v),
                            (None, None) => None,
                            (Some(b), None) => Some(b),
                            (Some(b), Some(v)) => Some(min(b, v))
                        };
                    }
                }
            }
            best_cost
        }

        fn complete(amphipods: &HashMap<char, HashSet<Point>>) -> bool {
            let mut complete = true;
            for (amphipod, positions) in amphipods {
                for position in positions {
                    if (position.y != 2 && position.y != 3) || match amphipod {
                        'A' => position.x != 3,
                        'B' => position.x != 5,
                        'C' => position.x != 7,
                        'D' => position.x != 9,
                        _ => unreachable!()
                    } == true {
                        debug!("{} @ {:?} isn't in terminal position", amphipod, position);
                        complete = false;
                    }
                }
            }
            complete
        }
    */
    fn add_amphipod(&mut self, amphipod: char, x: usize, y: usize) {
        //self.amphipods.push((Point::new(x, y), amphipod));
        let idx = Self::from_world(x as i64, y as i64);
        self.amphipods = self
            .amphipods
            .chars()
            .enumerate()
            .map(|(i, c)| if i == idx { amphipod } else { c })
            .collect();
    }

    fn add_wall(&mut self, x: usize, y: usize) {
        //self.walls.insert(Point::new(x, y));
    }

    fn add_space(&mut self, x: usize, y: usize) {
        //self.spaces.insert(Point::new(x, y));
    }
}

#[cfg(test)]
mod tests {
    use crate::*;
    use std::collections::{HashMap, HashSet};

    #[ctor::ctor]
    fn init() {
        env_logger::init();
    }
}
